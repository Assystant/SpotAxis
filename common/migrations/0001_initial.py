# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2016-08-13 23:18


from __future__ import absolute_import
import common.models
from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import localflavor.us.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.')], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', localflavor.us.models.PhoneNumberField(blank=True, default=None, null=True, verbose_name='Phone')),
                ('phone_ext', models.PositiveIntegerField(blank=True, default=None, null=True, verbose_name='Extension')),
                ('cellphone', localflavor.us.models.PhoneNumberField(blank=True, default=None, null=True, verbose_name='Celular')),
                ('photo', models.ImageField(blank=True, default=b'logos_TRM/logo_TRM_user_default.png', max_length=200, null=True, upload_to=b'photos/', verbose_name='Photo')),
                ('logued_by', models.CharField(blank=True, choices=[(b'EL', b'Site'), (b'FB', b'Facebook'), (b'GO', b'Google'), (b'LI', b'LinkedIn'), (b'TW', b'Twitter')], default=None, max_length=2, null=True, verbose_name='Loggin Method')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'ordering': ['-date_joined'],
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AccountVerification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activation_key', models.CharField(blank=True, default=None, max_length=40, null=True, verbose_name='Activation Key')),
                ('user', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'ordering': ['-id'],
                'verbose_name': 'Checking Account',
                'verbose_name_plural': 'Checking Accounts',
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street', models.CharField(blank=True, default=None, max_length=20, null=True, verbose_name='Street')),
                ('postal_code', models.CharField(blank=True, default=None, max_length=13, null=True, verbose_name='Postal Code')),
                ('state', models.CharField(blank=True, default=None, max_length=20, null=True, verbose_name='State')),
                ('city', models.CharField(blank=True, default=None, max_length=20, null=True, verbose_name='City')),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='Last Modified')),
            ],
            options={
                'ordering': ['-last_modified'],
                'verbose_name': 'Address',
                'verbose_name_plural': 'Addresses',
            },
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default=None, max_length=150, null=True, verbose_name='Name')),
            ],
            options={
                'ordering': ['industry', 'name'],
                'verbose_name': 'Area/Industry',
                'verbose_name_plural': 'Areas/Industry',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iso2_code', models.CharField(blank=True, default=None, max_length=2, null=True, unique=True, verbose_name=b'ISO alpha-2')),
                ('name', models.CharField(blank=True, default=None, max_length=128, null=True, verbose_name='Name')),
                ('continent', models.CharField(blank=True, choices=[(b'AF', 'Africa'), (b'NA', 'North America'), (b'EU', 'Europe'), (b'AS', 'Asia'), (b'OC', 'Oceania'), (b'SA', 'South America'), (b'AN', 'Antarctica')], default=None, max_length=2, null=True, verbose_name='Continents')),
                ('order', models.PositiveSmallIntegerField(blank=True, default=1000, null=True, verbose_name='Order')),
            ],
            options={
                'ordering': ['order', 'continent', 'name'],
                'verbose_name': 'Country',
                'verbose_name_plural': 'Countries',
            },
        ),
        migrations.CreateModel(
            name='Degree',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='Name')),
                ('codename', models.CharField(blank=True, default=None, max_length=20, null=True)),
                ('order', models.PositiveSmallIntegerField(blank=True, default=100, null=True)),
            ],
            options={
                'ordering': ['order'],
                'verbose_name': 'School Grade',
                'verbose_name_plural': 'School Grades',
            },
        ),
        migrations.CreateModel(
            name='EmailVerification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('old_email', models.EmailField(max_length=254, verbose_name='Email Old')),
                ('new_email', models.EmailField(max_length=254, verbose_name='Email New')),
                ('token', models.CharField(default=common.models.generate_token, max_length=40, verbose_name='Token')),
                ('code', models.CharField(default=common.models.generate_token, max_length=40, verbose_name='Code')),
                ('is_approved', models.BooleanField(default=False, verbose_name='Approved')),
                ('is_expired', models.BooleanField(default=False, verbose_name='Expired')),
                ('expiration_date', models.DateTimeField(default=common.models.generate_confirm_expire_date, verbose_name='Date of Expiration')),
                ('user', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'ordering': ['-id'],
                'verbose_name': 'Verification of Email',
                'verbose_name_plural': 'Verification of Emails',
            },
        ),
        migrations.CreateModel(
            name='Employment_Type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='Name')),
                ('codename', models.CharField(blank=True, default=None, max_length=20, null=True)),
                ('order', models.SmallIntegerField(blank=True, default=100, null=True)),
            ],
            options={
                'ordering': ['order'],
                'verbose_name': 'Type of Employment',
                'verbose_name_plural': 'Type of Employments',
            },
        ),
        migrations.CreateModel(
            name='Gender',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default=None, max_length=20, null=True, verbose_name='Name')),
                ('codename', models.CharField(blank=True, default=None, max_length=20, null=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Gender',
                'verbose_name_plural': 'Gender',
            },
        ),
        migrations.CreateModel(
            name='Identification_Doc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default=None, max_length=30, null=True, verbose_name='Name')),
                ('codename', models.CharField(blank=True, default=None, max_length=20, null=True)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name': 'Type of Identification',
                'verbose_name_plural': 'Type of Identification',
            },
        ),
        migrations.CreateModel(
            name='Industry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default=None, max_length=150, null=True, verbose_name='Name')),
            ],
            options={
                'ordering': ['name'],
                'verbose_name': 'Industry',
                'verbose_name_plural': 'Industries',
            },
        ),
        migrations.CreateModel(
            name='Marital_Status',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default=None, max_length=20, null=True, verbose_name='Name')),
                ('codename', models.CharField(blank=True, default=None, max_length=20, null=True)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name': 'Marital Status',
                'verbose_name_plural': 'Marital Status',
            },
        ),
        migrations.CreateModel(
            name='Municipal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default=None, max_length=80, null=True, verbose_name='Name')),
            ],
            options={
                'ordering': ['state', 'name'],
                'verbose_name': 'City',
                'verbose_name_plural': 'Cities',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('codename', models.CharField(max_length=20)),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profiles',
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default=None, max_length=60, null=True, verbose_name='Name')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='common.Country', verbose_name='Country')),
            ],
            options={
                'ordering': ['country', 'name'],
                'verbose_name': 'State',
                'verbose_name_plural': 'States',
            },
        ),
        migrations.CreateModel(
            name='Subdomain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cname', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Cname')),
                ('slug', models.CharField(blank=True, default=True, max_length=255, null=True, verbose_name='Subdomain')),
            ],
            options={
                'verbose_name': 'Subdomain',
                'verbose_name_plural': 'Subdomain',
            },
        ),
        migrations.AddField(
            model_name='municipal',
            name='state',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='common.State', verbose_name='State'),
        ),
        migrations.AddField(
            model_name='area',
            name='industry',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='common.Industry', verbose_name='Industry'),
        ),
        migrations.AddField(
            model_name='address',
            name='country',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='common.Country', verbose_name='Country'),
        ),
        migrations.AddField(
            model_name='address',
            name='municipal',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='common.Municipal', verbose_name='City'),
        ),
        migrations.AddField(
            model_name='user',
            name='profile',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='common.Profile', verbose_name='Profile'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
